//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client-minimal-sample.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './PostClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type IdInUrlPostQueryParameters = {
  id: number;
}

export type ParameterInUrlNoBodyPostQueryParameters = {
  id: string | null;
}

export type SimpleBodyWithParameterPostQueryParameters = {
  id: number;
}

export type SimpleArrayBodyWithParameterPostQueryParameters = {
  id: number;
}

export type FormParameterPostQueryParameters = {
  id: number;
  test?: string | null | null;
  dateOnly?: Date | null;
  dateTime?: Date | null;
}

export type FormParameterPostMutationParameters = {
  test?: string | null | undefined ; 
  dateOnly?: Date | undefined ; 
  dateTime?: Date | undefined ; 
}

export function idInUrlUrl(id: number): string {
  let url_ = getBaseUrl() + "/post/user/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function idInUrlMutationKey(id: number): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'idInUrl',
      id as any,
    ]);
}

export function useIdInUrlMutation<TContext>(id: number, options?: Omit<UseMutationOptions<string, unknown, Types.DummyDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, Types.DummyDto, TContext> {
  const key = idInUrlMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation((dto: Types.DummyDto) => Client.idInUrl(id, dto), {...options, mutationKey: key});
}
  
export function noParameterNoBodyUrl(): string {
  let url_ = getBaseUrl() + "/post/no-parameter/no-body";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function noParameterNoBodyMutationKey(): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'noParameterNoBody',
    ]);
}

export function useNoParameterNoBodyMutation<TContext>(options?: Omit<UseMutationOptions<string, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, void, TContext> {
  const key = noParameterNoBodyMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation(() => Client.noParameterNoBody(), {...options, mutationKey: key});
}
  
export function simpleBodyUrl(): string {
  let url_ = getBaseUrl() + "/post/no-parameter/simple-body";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function simpleBodyMutationKey(): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'simpleBody',
    ]);
}

export function useSimpleBodyMutation<TContext>(options?: Omit<UseMutationOptions<string, unknown, string, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, string, TContext> {
  const key = simpleBodyMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation((body: string) => Client.simpleBody(body), {...options, mutationKey: key});
}
  
export function parameterInUrlNoBodyUrl(id: string | null): string {
  let url_ = getBaseUrl() + "/post/with-parameter/{id}/no-body";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function parameterInUrlNoBodyMutationKey(id: string | null): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'parameterInUrlNoBody',
      id as any,
    ]);
}

export function useParameterInUrlNoBodyMutation<TContext>(id: string | null, options?: Omit<UseMutationOptions<string, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, void, TContext> {
  const key = parameterInUrlNoBodyMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation(() => Client.parameterInUrlNoBody(id), {...options, mutationKey: key});
}
  
export function simpleBodyWithParameterUrl(id: number): string {
  let url_ = getBaseUrl() + "/post/with-parameter/{id}/simple-body";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function simpleBodyWithParameterMutationKey(id: number): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'simpleBodyWithParameter',
      id as any,
    ]);
}

export function useSimpleBodyWithParameterMutation<TContext>(id: number, options?: Omit<UseMutationOptions<string, unknown, string, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, string, TContext> {
  const key = simpleBodyWithParameterMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation((body: string) => Client.simpleBodyWithParameter(id, body), {...options, mutationKey: key});
}
  
export function simpleArrayBodyWithParameterUrl(id: number): string {
  let url_ = getBaseUrl() + "/post/with-parameter/{id}/simple-array-body";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function simpleArrayBodyWithParameterMutationKey(id: number): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'simpleArrayBodyWithParameter',
      id as any,
    ]);
}

export function useSimpleArrayBodyWithParameterMutation<TContext>(id: number, options?: Omit<UseMutationOptions<string, unknown, string[], TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, string[], TContext> {
  const key = simpleArrayBodyWithParameterMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation((body: string[]) => Client.simpleArrayBodyWithParameter(id, body), {...options, mutationKey: key});
}
  
export function formParameterUrl(id: number): string {
  let url_ = getBaseUrl() + "/post/form-parameter/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function formParameterMutationKey(id: number): MutationKey {
  return trimArrayEnd([
      'PostClient',
      'formParameter',
      id as any,
    ]);
}

export function useFormParameterMutation<TContext>(id: number, options?: Omit<UseMutationOptions<string, unknown, FormParameterPostMutationParameters, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, FormParameterPostMutationParameters, TContext> {
  const key = formParameterMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation((formParameterPostMutationParameters: FormParameterPostMutationParameters) => Client.formParameter(id, formParameterPostMutationParameters.test, formParameterPostMutationParameters.dateOnly, formParameterPostMutationParameters.dateTime), {...options, mutationKey: key});
}