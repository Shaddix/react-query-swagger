//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client-minimal-sample.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../axios-client-minimal-sample.types';
import { getAxios, getBaseUrl } from './helpers';

export function jsonInQuery(dto?: Types.DummyDto | null | undefined, config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/query/JsonInQuery?";
    if (dto !== undefined && dto !== null)
    {
        const content_ = Types.serializeDummyDto(dto);
        url_ += "dto=" + encodeURIComponent(content_) + "&";
    }
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigJsonInQuery,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processJsonInQuery(_response);
    });
}

function processJsonInQuery(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
    
        result200 = resultData200;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}

export function dateOnlyInQuery(date?: Date | undefined, config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/query/DateOnlyInQuery?";
    if (date === null)
        throw new Error("The parameter 'date' cannot be null.");
    else if (date !== undefined)
        url_ += "date=" + encodeURIComponent(date ? "" + Types.formatDate(date) : "") + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDateOnlyInQuery,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDateOnlyInQuery(_response);
    });
}

function processDateOnlyInQuery(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
    
        result200 = resultData200;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}

export function dateTimeInQuery(date?: Date | undefined, config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/query/DateTimeInQuery?";
    if (date === null)
        throw new Error("The parameter 'date' cannot be null.");
    else if (date !== undefined)
        url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDateTimeInQuery,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDateTimeInQuery(_response);
    });
}

function processDateTimeInQuery(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
    
        result200 = resultData200;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}

export function arrayInQuery(data?: string[] | null | undefined, config?: AxiosRequestConfig | undefined): Promise<string[]> {
    let url_ = getBaseUrl() + "/query/ArrayInQuery?";
    if (data !== undefined && data !== null)
        data && data.forEach(item => { url_ += "data=" + encodeURIComponent("" + item) + "&"; });
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigArrayInQuery,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            "Accept": "application/json"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processArrayInQuery(_response);
    });
}

function processArrayInQuery(response: AxiosResponse): Promise<string[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = resultData200;
        return Promise.resolve<string[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string[]>(null as any);
}
let _requestConfigJsonInQuery: Partial<AxiosRequestConfig> | null;
export function getJsonInQueryRequestConfig() {
  return _requestConfigJsonInQuery;
}
export function setJsonInQueryRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigJsonInQuery = value;
}
export function patchJsonInQueryRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigJsonInQuery = patch(_requestConfigJsonInQuery ?? {});
}

let _requestConfigDateOnlyInQuery: Partial<AxiosRequestConfig> | null;
export function getDateOnlyInQueryRequestConfig() {
  return _requestConfigDateOnlyInQuery;
}
export function setDateOnlyInQueryRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigDateOnlyInQuery = value;
}
export function patchDateOnlyInQueryRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigDateOnlyInQuery = patch(_requestConfigDateOnlyInQuery ?? {});
}

let _requestConfigDateTimeInQuery: Partial<AxiosRequestConfig> | null;
export function getDateTimeInQueryRequestConfig() {
  return _requestConfigDateTimeInQuery;
}
export function setDateTimeInQueryRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigDateTimeInQuery = value;
}
export function patchDateTimeInQueryRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigDateTimeInQuery = patch(_requestConfigDateTimeInQuery ?? {});
}

let _requestConfigArrayInQuery: Partial<AxiosRequestConfig> | null;
export function getArrayInQueryRequestConfig() {
  return _requestConfigArrayInQuery;
}
export function setArrayInQueryRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigArrayInQuery = value;
}
export function patchArrayInQueryRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigArrayInQuery = patch(_requestConfigArrayInQuery ?? {});
}