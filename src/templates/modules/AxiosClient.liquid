import { throwException, isAxiosError } from '../client';
import { getAxios, getBaseUrl } from './helpers';
{%- if GenerateClientInterfaces -%}
{% if ExportTypes %}export {% endif %}interface I{{ Class }} {
{%     for operation in Operations -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}>;
{%-     endfor -%}}
{%- endif -%}
{% for operation in Operations %}

{% template Client.Method.Documentation %}
export function {% template OperationNameSafe %}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type | prepend: 'Types.' }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}{% if operation.Parameters.size > 0 %}, {%endif%}config?: AxiosRequestConfig | undefined): Promise<{{ operation.ResultType | prepend: 'Types.' }}> {
    {% template Client.RequestUrl %}

{%     if operation.HasBody -%}
    {% template Client.RequestBody %}

{%     endif -%}
    let options_: AxiosRequestConfig = {
        ..._requestConfig{{ operation.ActualOperationNameUpper }},
        ...config,
{%     if operation.HasBody -%}
        data: content_,
{%     endif -%}
{%     if operation.IsFile -%}
        responseType: "blob",
{%     endif -%}
        method: "{{ operation.HttpMethodUpper | upcase }}",
        url: url_,
        headers: {
            ..._requestConfig{{ operation.ActualOperationNameUpper }}?.headers,
{%     for parameter in operation.HeaderParameters -%}
            "{{ parameter.Name }}": {{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null ? "" + {{ parameter.VariableName }} : "",
{%     endfor -%}
{%     if operation.HasContent or operation.ConsumesFormUrlEncoded -%}
            "Content-Type": "{{ operation.Consumes }}",
{%     endif -%}
{%     if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
            "Accept": "{{ operation.Produces }}"
{%     endif -%}
        }
    };

{%     if UseTransformOptionsMethod -%}
    return this.transformOptions(options_).then(transformedOptions_ => {
        return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
{%     else -%}
    return getAxios().request(options_).catch((_error: any) => {
{%     endif -%}
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
{%     if UseTransformResultMethod -%}
        return this.transformResult(url_, _response, (_response: AxiosResponse) => this.process{{ operation.ActualOperationNameUpper }}(_response));
{%     else -%}
        return process{{ operation.ActualOperationNameUpper }}(_response);
{%     endif -%}
    });
}

function process{{ operation.ActualOperationNameUpper }}(response: AxiosResponse): Promise<{{ operation.ResultType | prepend: 'Types.' }}> {
    const status = response.status;
    {% template Client.ProcessResponse %}
}
{% endfor -%}
